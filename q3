#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool isSafe(int i, int j, int N, vector<vector<int>>& m, vector<vector<bool>>& visited) {
    return (i >= 0 && j >= 0 && i < N && j < N && m[i][j] == 1 && !visited[i][j]);
}

void findPaths(int i, int j, int N, vector<vector<int>>& m, vector<vector<bool>>& visited, string path, vector<string>& paths) {
    if (i == N - 1 && j == N - 1) {
        paths.push_back(path);
        return;
    }

    visited[i][j] = true;

    if (isSafe(i + 1, j, N, m, visited)) // Down
        findPaths(i + 1, j, N, m, visited, path + 'D', paths);

    if (isSafe(i, j + 1, N, m, visited)) // Right
        findPaths(i, j + 1, N, m, visited, path + 'R', paths);

    visited[i][j] = false;
}

string sortedPaths(int N, vector<vector<int>>& m) {
    vector<vector<bool>> visited(N, vector<bool>(N, false));
    vector<string> paths;

    if (m[0][0] == 0 || m[N - 1][N - 1] == 0) {
        return "No valid path exists.";
    }

    findPaths(0, 0, N, m, visited, "", paths);

    sort(paths.begin(), paths.end());

    string result;
    for (const string& path : paths) {
        result += path + " ";
    }

    return result;
}

int main() {
    int N = 4;
    vector<vector<int>> m = {{1, 0, 0, 0},
                              {1, 1, 0, 1},
                              {1, 1, 0, 0},
                              {0, 1, 1, 1}};

    string result = sortedPaths(N, m);
    if (result.empty()) {
        cout << "No valid path exists." << endl;
    } else {
        cout << "Output: " << result << endl;
    }

    return 0;
}
